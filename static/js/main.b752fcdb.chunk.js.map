{"version":3,"sources":["utils/ResultsProvider.js","components/ListItem.js","components/MovieInfo.js","components/NominationsList.js","components/Intro.js","components/ListView.js","App.js","reportWebVitals.js","index.js"],"names":["getSearchResults","searchTerm","page","a","queryString","apiConfig","url","key","fetch","mode","response","json","data","getMovieById","id","MovieCard","useState","hover","setHover","noImg","Poster","Badge","variant","btn","isNominated","isFull","Button","className","disabled","onClick","onNomination","nominateButton","onMouseOver","onMouseOut","Card","style","width","height","onSelected","imdbID","Img","src","Body","Title","pill","Year","MovieInfo","props","genreBadges","Genre","split","map","genre","image","year","rating","imdbRating","runTime","Runtime","awards","Awards","language","Language","size","Plot","Director","Actors","NominationItem","movie","ListGroup","Item","setSelected","action","onRemove","NominationsList","count","Object","keys","nominations","length","items","entries","value","removeOne","onClear","Intro","Jumbotron","ListView","state","React","createRef","listData","filters","selectedItem","selectedData","maxPages","totalResults","showList","handleLoadMore","bind","addToNominatons","removeSingle","this","current","setState","results","Response","Search","pages","Math","floor","parseInt","concat","e","listContainer","document","getElementById","then","item","currentNominations","localStorage","getItem","console","log","parsed","JSON","parse","setItem","stringify","forceUpdate","currentItems","hitCounter","inStorage","listItems","movieData","introJumb","nominationList","selectedMovie","Form","InputGroup","Prepend","Text","Control","type","ref","onChange","onSearchChange","placeholder","pageStart","loadMore","hasMore","loader","useWindow","threshold","href","Toast","show","Header","Component","App","Navbar","bg","Brand","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b752fcdb.chunk.js","sourcesContent":["import apiConfig from \"./apikey.json\";\r\nconst DEFAULT_TYPE = \"movie\";\r\n\r\nconst getSearchResults = async (searchTerm, page) => {\r\n  const queryString =\r\n    apiConfig.url +\r\n    \"?apikey=\" +\r\n    apiConfig.key +\r\n    \"&s=\" +\r\n    searchTerm +\r\n    \"&page=\" +\r\n    page +\r\n    \"&type=\" +\r\n    DEFAULT_TYPE;\r\n  const response = await fetch(queryString, { mode: \"cors\" });\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\nconst getMovieById = async (id) => {\r\n  const queryString =\r\n    apiConfig.url + \"?apikey=\" + apiConfig.key + \"&i=\" + id + \"&plot=full\";\r\n  const response = await fetch(queryString, { mode: \"cors\" });\r\n  const data = await response.json();\r\n  return data;\r\n};\r\nexport { getSearchResults, getMovieById };\r\n","import React, { useState } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Award, Check } from \"react-bootstrap-icons\";\r\nimport \"./ListItem.css\";\r\nconst MovieCard = (data) => {\r\n  // console.log(data)\r\n  const [hover, setHover] = useState(false);\r\n  const noImg =\r\n    data.data.Poster !== \"N/A\" ? null : (\r\n      <Badge variant=\"light\">No image for this title</Badge>\r\n    );\r\n  /*\r\n  const nominateButton = hover ? (\r\n    //\r\n\r\n    <Button\r\n      variant=\"warning\"\r\n      className=\"nominate\"\r\n      onClick={() => data.onNomination(data.data)}\r\n      disabled={data.isNominated}\r\n    >\r\n      Nominate <Award />\r\n    </Button>\r\n  ) : null;\r\n  */\r\n  // console.log(nominateButton);\r\n  const btn =\r\n    data.isNominated || data.isFull ? (\r\n      <Button\r\n        variant={data.isNominated ? \"warning\" : \"secondary\"}\r\n        className=\"nominate\"\r\n        disabled={true}\r\n      >\r\n        {data.isNominated ? \"Nominated \" : \"Nominations full \"}\r\n        {data.isNominated ? <Check /> : null}\r\n      </Button>\r\n    ) : (\r\n      <Button\r\n        variant=\"warning\"\r\n        className=\"nominate\"\r\n        onClick={() => data.onNomination(data.data)}\r\n      >\r\n        Nominate <Award />\r\n      </Button>\r\n    );\r\n  const nominateButton = hover ? btn : null;\r\n  return (\r\n    <div\r\n      className=\"listItem\"\r\n      onMouseOver={() => setHover(true)}\r\n      onMouseOut={() => setHover(false)}\r\n    >\r\n      <Card\r\n        style={{ width: \"11rem\", height: \"26rem\" }}\r\n        className=\"listItemCard\"\r\n        onClick={() => data.onSelected(data.data.imdbID)}\r\n      >\r\n        <div>\r\n          <Card.Img\r\n            variant=\"top\"\r\n            src={data.data.Poster !== \"N/A\" ? data.data.Poster : null}\r\n          />\r\n          <br />\r\n          {nominateButton}\r\n        </div>\r\n\r\n        <Card.Body className=\"cardBody\">\r\n          <div className=\"cardContent\">\r\n            {noImg}\r\n\r\n            <Card.Title className=\"cardTitle\">{data.data.Title}</Card.Title>\r\n            <Badge pill className=\"year\" variant=\"info\">\r\n              {data.data.Year}\r\n            </Badge>\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default MovieCard;\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { Badge } from \"react-bootstrap\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Award, Check } from \"react-bootstrap-icons\";\r\nimport \"./MovieInfo.css\";\r\nconst MovieInfo = (props) => {\r\n  const data = props.data;\r\n  const genres = data.Genre.split(\",\");\r\n  const genreBadges =\r\n    genres.map((genre) => (\r\n      <Badge className=\"genres\" pill variant=\"secondary\" key={genre}>\r\n        {genre}\r\n      </Badge>\r\n    )) || null;\r\n  const image =\r\n    data.Poster != \"N/A\" ? (\r\n      <Card.Img variant=\"left\" src={data.Poster} className=\"image\" />\r\n    ) : null;\r\n\r\n  const year =\r\n    data.Year != \"N/A\" ? <p className=\"oneLineContent\">{data.Year} -</p> : null;\r\n\r\n  const rating =\r\n    data.imdbRating != \"N/A\" ? (\r\n      <p className=\"oneLineContent\">IMDb {data.imdbRating} -</p>\r\n    ) : null;\r\n\r\n  const runTime =\r\n    data.Runtime != \"N/A\" ? (\r\n      <p className=\"oneLineContent\">{data.Runtime}</p>\r\n    ) : null;\r\n\r\n  const awards =\r\n    data.Awards != \"N/A\" ? (\r\n      <p className=\"otherDetails\">Awards: {data.Awards}</p>\r\n    ) : null;\r\n\r\n  const language =\r\n    data.language != \"N/A\" ? (\r\n      <p className=\"otherDetails\">Language: {data.Language} </p>\r\n    ) : null;\r\n  return (\r\n    <Card className=\"infoCard\">\r\n      <div className=\"flexBox\">\r\n        <div className=\"content\">\r\n          <div className=\"headerDiv\">\r\n            <h1 className=\"title\">{data.Title} </h1>\r\n            <Button\r\n              className=\"nominateButton\"\r\n              onClick={() => props.onNomination(data)}\r\n              variant=\"warning\"\r\n              disabled={props.isNominated}\r\n            >\r\n              {!props.isNominated ? <Award size={34} /> : <Check size={34} />}\r\n            </Button>\r\n          </div>\r\n\r\n          <div className=\"oneLine\">\r\n            {year}\r\n            {rating}\r\n            {runTime}\r\n          </div>\r\n          {genreBadges}\r\n          <br />\r\n\r\n          <p className=\"plot\">{data.Plot}</p>\r\n          {awards}\r\n          <p className=\"otherDetails\">Directors: {data.Director}</p>\r\n          <p className=\"otherDetails\">Starring: {data.Actors}</p>\r\n          {language}\r\n        </div>\r\n\r\n        {image}\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nMovieInfo.propTypes = {\r\n  data: PropTypes.object,\r\n  isNominated: PropTypes.bool,\r\n  onNomination: PropTypes.func,\r\n};\r\nexport default MovieInfo;\r\n","import React from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\nimport \"./NominationsList.css\";\r\nimport { Award, X, Trash } from \"react-bootstrap-icons\";\r\n\r\nconst NominationItem = (movie) => {\r\n  return (\r\n    <ListGroup.Item\r\n      onClick={() => movie.setSelected(movie.movie.imdbID)}\r\n      action\r\n    >\r\n      <div className=\"nominationItem\">\r\n        <h5 className=\"listInfo\">{movie.movie.Title}</h5>\r\n        <Badge pill variant=\"info\" className=\"nominationBadge\">\r\n          {movie.movie.Year}\r\n        </Badge>\r\n        <Button\r\n          onClick={() => movie.onRemove()}\r\n          variant=\"outline-danger\"\r\n          className=\"deleteButton\"\r\n        >\r\n          <X size={30} />\r\n        </Button>\r\n      </div>\r\n    </ListGroup.Item>\r\n  );\r\n};\r\n\r\nconst NominationsList = (data) => {\r\n  const count = Object.keys(data.nominations).length;\r\n\r\n  const items = Object.entries(data.nominations).map(([key, value]) => {\r\n    return (\r\n      <NominationItem\r\n        key={key}\r\n        movie={value}\r\n        onRemove={() => data.removeOne(key)}\r\n        setSelected={data.setSelected}\r\n      />\r\n    );\r\n  });\r\n  return (\r\n    <ListGroup className=\"nominationsList\">\r\n      <ListGroup.Item>\r\n        <h5>\r\n          <Award /> {count}/5 nominations <Award />\r\n          <Button\r\n            onClick={() => data.onClear()}\r\n            variant=\"outline-danger\"\r\n            className=\"deleteButton\"\r\n          >\r\n            <Trash size={20} />\r\n          </Button>\r\n        </h5>\r\n      </ListGroup.Item>\r\n      {items}\r\n    </ListGroup>\r\n  );\r\n};\r\nexport default NominationsList;\r\n","import React from \"react\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport \"./Intro.css\";\r\nconst Intro = () => {\r\n  return (\r\n    <div className=\"introDiv\">\r\n      <br />\r\n      <Jumbotron className=\"jumbo\">\r\n        <h1>Hi, welcome to the Shoppies!</h1>\r\n        <p className=\"description\">\r\n          Start typing in the search bar to find movies to nominate. Click on a\r\n          movie to see further details or click the Nominate button to add the\r\n          movie to your nomination list.\r\n        </p>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\nexport default Intro;\r\n","import React, { Component } from \"react\";\r\nimport { InputGroup, Form, Badge } from \"react-bootstrap\";\r\nimport { Search } from \"react-bootstrap-icons\";\r\nimport { getSearchResults, getMovieById } from \"../utils/ResultsProvider\";\r\nimport MovieCard from \"./ListItem\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport MovieInfo from \"./MovieInfo\";\r\nimport NominationsList from \"./NominationsList\";\r\nimport Intro from \"./Intro\";\r\nimport Toast from \"react-bootstrap/Toast\";\r\nimport \"./ListView.css\";\r\n\r\n// TODO Top Genres\r\nclass ListView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      searchTerm: React.createRef(),\r\n      listData: [],\r\n      filters: [],\r\n      selectedItem: null,\r\n      selectedData: null,\r\n      page: 1,\r\n      maxPages: 100,\r\n      totalResults: null,\r\n      showList: false,\r\n    };\r\n    this.handleLoadMore = this.handleLoadMore.bind(this);\r\n    this.onSelected = this.onSelected.bind(this);\r\n    this.addToNominatons = this.addToNominatons.bind(this);\r\n    this.onClear = this.onClear.bind(this);\r\n    this.removeSingle = this.removeSingle.bind(this);\r\n  }\r\n\r\n  async onSearchChange() {\r\n    if (this.state.searchTerm.current.value == \"\") {\r\n      this.setState({ listData: [], totalResults: null });\r\n    } else {\r\n      const results = await getSearchResults(\r\n        this.state.searchTerm.current.value,\r\n        1\r\n      );\r\n\r\n      if (results.Response === \"True\") {\r\n        // console.log(results)\r\n        const items = results.Search;\r\n        const pages = Math.floor(parseInt(results.totalResults) / 10) + 1;\r\n        // console.log(pages)\r\n        this.setState({\r\n          listData: items,\r\n          page: 1,\r\n          maxPages: pages,\r\n          totalResults: results.totalResults,\r\n        });\r\n      } else {\r\n        this.setState({\r\n          listData: [],\r\n          page: 1,\r\n          maxPages: 100,\r\n          totalResults: null,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async handleLoadMore(page) {\r\n    const results = await getSearchResults(\r\n      this.state.searchTerm.current.value,\r\n      page\r\n    );\r\n    // console.log(results)\r\n    // console.log(\"current page\" + page)\r\n    if (results.Response === \"True\") {\r\n      const items = results.Search;\r\n      this.state.listData = this.state.listData.concat(items);\r\n      this.setState({ page: page });\r\n    }\r\n  }\r\n\r\n  onSelected(e) {\r\n    const listContainer = document.getElementById(\"listDiv\");\r\n    if (listContainer) {\r\n      listContainer.style.width = \"50%\";\r\n    }\r\n    getMovieById(e).then((item) => {\r\n      this.setState({ selectedItem: e, selectedData: item });\r\n    });\r\n  }\r\n  addToNominatons(movie) {\r\n    // console.log(movie);\r\n    const currentNominations = localStorage.getItem(\"nominations\");\r\n    console.log(currentNominations);\r\n    if (currentNominations) {\r\n      const parsed = JSON.parse(currentNominations);\r\n      console.log(parsed);\r\n      if (Object.keys(parsed).length < 5) {\r\n        parsed[movie.imdbID] = movie;\r\n        localStorage.setItem(\"nominations\", JSON.stringify(parsed));\r\n      }\r\n    } else {\r\n      const nominations = {};\r\n      nominations[movie.imdbID] = movie;\r\n\r\n      localStorage.setItem(\"nominations\", JSON.stringify(nominations));\r\n    }\r\n    this.forceUpdate();\r\n    // inStorage.forEach((item) => console.log(item));\r\n  }\r\n\r\n  onClear() {\r\n    localStorage.setItem(\"nominations\", JSON.stringify({}));\r\n    this.setState({ showList: true });\r\n  }\r\n\r\n  removeSingle(id) {\r\n    console.log(\"removeSingle called!\");\r\n    const currentItems = JSON.parse(localStorage.getItem(\"nominations\"));\r\n    delete currentItems[id];\r\n    localStorage.setItem(\"nominations\", JSON.stringify(currentItems));\r\n    this.setState({ showList: true });\r\n  }\r\n\r\n  render() {\r\n    // console.log(this.state.searchTerm)\r\n\r\n    const hitCounter = this.state.totalResults ? (\r\n      <Badge>{this.state.totalResults} results</Badge>\r\n    ) : null;\r\n\r\n    const inStorage = localStorage.getItem(\"nominations\") || null;\r\n\r\n    const nominations = inStorage ? JSON.parse(inStorage) : null;\r\n    const isFull = nominations ? Object.keys(nominations).length === 5 : false;\r\n    const listItems =\r\n      this.state.listData.length > 0\r\n        ? this.state.listData.map((movieData) => (\r\n            <MovieCard\r\n              data={movieData}\r\n              key={movieData.imdbID}\r\n              onSelected={this.onSelected}\r\n              onNomination={this.addToNominatons}\r\n              isNominated={\r\n                nominations ? !!nominations[movieData.imdbID] : false\r\n              }\r\n              isFull={isFull}\r\n            />\r\n          ))\r\n        : null;\r\n\r\n    // console.log(Object.entries(inStorage));\r\n    const introJumb =\r\n      this.state.searchTerm?.current?.value == null ||\r\n      this.state.searchTerm.current.value == \"\" ? (\r\n        <Intro />\r\n      ) : null;\r\n    const nominationList =\r\n      Object.keys(nominations || {}).length > 0 || this.state.showList ? (\r\n        <NominationsList\r\n          nominations={nominations}\r\n          onClear={this.onClear}\r\n          removeOne={this.removeSingle}\r\n          setSelected={this.onSelected}\r\n        />\r\n      ) : null;\r\n\r\n    const selectedMovie = this.state.selectedData ? (\r\n      <MovieInfo\r\n        data={this.state.selectedData}\r\n        onNomination={this.addToNominatons}\r\n        isNominated={\r\n          nominations ? !!nominations[this.state.selectedData.imdbID] : false\r\n        }\r\n      />\r\n    ) : null;\r\n    // console.log(this.state.page);\r\n    // console.log(this.state.listData);\r\n    return (\r\n      <div>\r\n        <div className=\"listViewContainer\">\r\n          <br />\r\n\r\n          <div id=\"listDiv\">\r\n            <Form className=\"searchBar\">\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>\r\n                    <Search />\r\n                  </InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  type=\"search\"\r\n                  ref={this.state.searchTerm}\r\n                  onChange={this.onSearchChange.bind(this)}\r\n                  placeholder=\"Search\"\r\n                  className=\"searchBar\"\r\n                />\r\n              </InputGroup>\r\n            </Form>\r\n            {introJumb}\r\n            {hitCounter}\r\n            <br />\r\n            <div className=\"list\">\r\n              <InfiniteScroll\r\n                className=\"scrollThing\"\r\n                pageStart={1}\r\n                loadMore={this.handleLoadMore}\r\n                hasMore={this.state.listData.length < this.state.totalResults}\r\n                loader={\r\n                  <div className=\"loader\" key={0}>\r\n                    <h1>Scroll to load more ...</h1>\r\n                  </div>\r\n                }\r\n                useWindow={false}\r\n                threshold={600}\r\n              >\r\n                {listItems}\r\n              </InfiniteScroll>\r\n            </div>\r\n          </div>\r\n          <div className=\"rightPanel\">\r\n            {nominationList}\r\n            {selectedMovie}\r\n          </div>\r\n        </div>\r\n        <a className=\"github\" href=\"https://github.com/ericcorbu/omdb-frontend\">\r\n          View on GitHub\r\n        </a>\r\n        <Toast className=\"theToast\" show={isFull}>\r\n          <Toast.Header>Congrats!</Toast.Header>\r\n          <Toast.Body>\r\n            You have selected 5 movies, completing your nomination list! Remove\r\n            a movie or clear your list to continue editing your list.\r\n          </Toast.Body>\r\n        </Toast>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListView;\r\n","import \"./App.css\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport React from \"react\";\r\nimport ListView from \"./components/ListView\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar className=\"navbar\" bg=\"light\">\r\n        <Navbar.Brand>The Shoppies</Navbar.Brand>\r\n      </Navbar>\r\n      <ListView />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}